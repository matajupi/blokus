@startuml
class Blokus {
    + {static} FIELD_ROWS: int = 20
    + {static} FiELD_COLS: int = 20
    + board: Board
    + players: [BasePlayer]

    + Blokus(players: list[BasePlayer])
    + void start()
    - void __turn(player: BasePlayer, first: bool=False)
    - bool __is_finished()
    - dict __get_winner_info()
}

class Board {
    + rows: int
    + cols: int
    + field: np.array

    + Board(rows: int, cols: int)
    + bool exists_can_place_location(player: BasePlayer)
    + bool try_place(mino: Mino, row: int, col: int, first: bool=False)
    + bool can_place(mino: Mino, row: int, col: int)
    - bool __is_valid_range(row: int, col: int)
    - bool __is_adjacent_corner(mino: Mino, row: int, col: int)
    - bool __is_same_owner(mino: Mino, row: int, col: int)
}

abstract BasePlayer {
    + id: int
    + own_minos: list[Mino]

    + BasePlayer(id: int, mino_info: list[dict])
    + void remove_mino(mino: Mino)
    + {abstract} void start_game(board: Board)
    + {abstract} dict get_place_mino_info(first: bool)
    + {abstract} void board_changed()
    + {abstract} void skip_turn()
    + {abstract} void invalid_mino_placed_location()
    + {abstract} void finish_game(winner_info: dict)
    - Mino __get_mino_by_id(id: int)
}

class Mino {
    + {static} MINO_SHAPES: list[np.array]
    + id: int
    + shape: int
    + rows: int
    + cols: int
    + owner: BasePlayer
    + rotate_times: int  // property
    + flipped: bool  // property
    - __updated: bool
    - __field_cache: np.array

    + Mino(mino_info: dict, owner: BasePlayer)
    + void rotate(times: int=1, right: bool=False)
    + void flip()
    + np.array get_field()
}

class WebSocketPlayer {
}

class AIPlayer {
}

class CUIPlayer {
}

Blokus o--> Board
Blokus o--> BasePlayer
BasePlayer o--> Mino
BasePlayer o--> Board
WebSocketPlayer --> BasePlayer
AIPlayer --> BasePlayer
CUIPlayer --> BasePlayer
@enduml

